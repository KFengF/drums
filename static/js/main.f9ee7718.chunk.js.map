{"version":3,"sources":["components/DrumPad/DrumPad.js","components/PadBank/PadBank.js","components/Controls/Controls.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","pressedStyle","backgroundColor","color","onPadPress","event","keyCode","playSound","pressedPad","power","setState","style","setTimeout","volume","setDisplay","id","sound","document","getElementById","currentTime","play","replace","state","addEventListener","this","audio","keyTrigger","onClick","className","src","React","Component","PadBank","currentPadBank","map","drum","i","url","key","Controls","changePower","display","changePadBank","setVolumen","volumen","alt","type","min","max","step","value","onChange","bankOne","bankTwo","App","String","fromCharCode","clearDisplay","e","target","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9ee7718.chunk.js","sourcesContent":["import React from 'react';\r\nimport './DrumPad.css';\r\n\r\nclass DrumPad extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            style: {}\r\n        }\r\n    }\r\n\r\n    pressedStyle = {\r\n        backgroundColor: '#222',\r\n        color: '#eee'\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.onPadPress);\r\n    }\r\n\r\n    onPadPress = (event) => {\r\n        if (event.keyCode === this.props.keyCode)  this.playSound();\r\n    }\r\n\r\n    pressedPad = () => {\r\n        if (this.props.power) {\r\n            this.setState({ style: this.pressedStyle });\r\n            setTimeout(() => {\r\n                this.setState({ style: {} })\r\n            }, 700);\r\n        }\r\n    }\r\n\r\n    playSound = () => {\r\n        const { power, keyCode, volume, setDisplay, id } = this.props;\r\n        if (power) {\r\n            const sound = document.getElementById(keyCode);\r\n            sound.currentTime = 0;\r\n            sound.volume = volume;\r\n            sound.play()\r\n            this.pressedPad();\r\n            setDisplay(id.replace(/-/g, ''));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { audio, keyCode, keyTrigger } = this.props;\r\n        return (\r\n            <div onClick={ this.playSound } style={ this.state.style } className='DrumPad'>\r\n                <audio id={ keyCode } src={ audio } />\r\n                { keyTrigger }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrumPad;","import React from 'react';\r\nimport DrumPad from '../DrumPad/DrumPad';\r\nimport './PadBank.css';\r\n\r\nclass PadBank extends React.Component {\r\n    render() {\r\n        const { power, volume, setDisplay, currentPadBank } = this.props;\r\n        return (\r\n            <div className=\"PadBank\">\r\n                {\r\n                    power ? currentPadBank.map((drum, i) => {\r\n                        return (\r\n                            <DrumPad\r\n                                id={ drum.id } audio={ drum.url }\r\n                                keyTrigger={ drum.keyTrigger }\r\n                                keyCode={ drum.keyCode }\r\n                                key={ i } power={ power }\r\n                                setDisplay={ setDisplay }\r\n                                volume={ volume }\r\n                            />\r\n                        );\r\n                    }) : currentPadBank.map((drum, i) => {\r\n                        return (\r\n                            <DrumPad\r\n                                id={ drum.id }\r\n                                audio={ `data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU2LjM2LjEwMAAAAAAAAAAAAAAA//OEAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAEAAABIADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV6urq6urq6urq6urq6urq6urq6urq6urq6v////////////////////////////////8AAAAATGF2YzU2LjQxAAAAAAAAAAAAAAAAJAAAAAAAAAAAASDs90hvAAAAAAAAAAAAAAAAAAAA//MUZAAAAAGkAAAAAAAAA0gAAAAATEFN//MUZAMAAAGkAAAAAAAAA0gAAAAARTMu//MUZAYAAAGkAAAAAAAAA0gAAAAAOTku//MUZAkAAAGkAAAAAAAAA0gAAAAANVVV` }\r\n                                keyTrigger={ drum.keyTrigger }\r\n                                keyCode={ drum.keyCode }\r\n                                key={ i } power={ power }\r\n                                setDisplay={ setDisplay }\r\n                                volume={ volume }\r\n                            />\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PadBank;","import React from 'react';\r\nimport './Controls.css';\r\n\r\nclass Controls extends React.Component {\r\n    render() {\r\n        const { power, changePower, display, changePadBank, setVolumen, volumen } = this.props;\r\n        return(\r\n            <div className='Controls'>\r\n                <div className='title'>\r\n                    <h1>Drums</h1>\r\n                    <img src='https://d33wubrfki0l68.cloudfront.net/e66392bc2941ad564b6956321e778f29073cf585/4190b/img/glyph-alternative.svg' alt='logo' />\r\n                </div>\r\n                <div className='switches'>\r\n                    <div className=\"power-container\">\r\n                        <h2>Power</h2>\r\n                        <label className=\"switch\">\r\n                            <input type=\"checkbox\" onClick={ changePower } />\r\n                            <span className=\"slider\" />\r\n                        </label>\r\n                    </div>\r\n                    {\r\n                        power ?\r\n                        <div>\r\n                            <h2>Bank</h2>\r\n                            <label className=\"switch\">\r\n                                <input type=\"checkbox\" onClick={ changePadBank } />\r\n                                <span className=\"slider bank\" />\r\n                            </label>\r\n                        </div> :\r\n                        <div className=\"switch\" />\r\n                    }\r\n                </div>\r\n                <h3>{ display }</h3>\r\n                <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" \r\n                value={ volumen } onChange={ setVolumen } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Controls;","import React from 'react';\nimport PadBank from './components/PadBank/PadBank';\nimport Controls from './components/Controls/Controls'\nimport './App.css';\n\nconst bankOne = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n}, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n},\n];\n\nconst bankTwo = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Chord-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n}, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Chord-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n}, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Chord-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n}, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Shaker',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n}, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n}, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n}, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: 'Punchy-Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n}, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Side-Stick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n}, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Snare',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n}];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            power: false,\n            display: String.fromCharCode(160),\n            currentPadBank: bankOne,\n            volume: 0.5\n        }\n    }\n\n    changePower = () => {\n        this.setState({\n            power: !this.state.power,\n            display: String.fromCharCode(160)\n        })\n    }\n\n    clearDisplay = () => {\n        this.setState({ display: String.fromCharCode(160) })\n    }\n\n    setDisplay = (display) => {\n        this.setState({ display })\n    }\n\n    changePadBank = () => {\n        if (this.state.power) {\n            this.state.currentPadBank === bankOne\n            ? this.setState({\n                currentPadBank: bankTwo,\n                display: 'Smooth Piano Kit'\n            })\n            : this.setState({\n                currentPadBank: bankOne,\n                display: 'Heater Kit'\n            })\n            setTimeout(() => this.clearDisplay(), 3000);\n        }\n    }\n    \n    setVolumen = (e) => {\n        if (this.state.power) {\n            this.setState({\n                volume: e.target.value,\n                display: 'Volumen: ' + Math.round(e.target.value * 100)\n            });\n            setTimeout(() => this.clearDisplay(), 5000);\n        }\n    }\n\n    render() {\n        const { power, volume, currentPadBank, display } = this.state;\n        return (\n            <div className='App'>\n                <PadBank \n                    power={ power } \n                    setDisplay={ this.setDisplay }\n                    volume={ volume } \n                    currentPadBank={ currentPadBank }\n                />\n                <Controls \n                    power={ power }\n                    changePower={ this.changePower } \n                    display={ display }\n                    changePadBank={ this.changePadBank } \n                    setVolumen={ this.setVolumen }\n                    volume={ volume }\n                />\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}